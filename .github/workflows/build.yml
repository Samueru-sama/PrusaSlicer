name: build

on:
  push:
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
    - name: 0. Prerequisities
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential autoconf cmake libglu1-mesa-dev libgtk-3-dev libdbus-1-dev libwebkit2gtk-4.0-dev desktop-file-utils
    - name: 1. Cloning the repository
      uses: actions/checkout@v4
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}
    - name: Determine dependency hash
      id: dephash
      run: echo dephash=$(git rev-parse HEAD:deps) >> $GITHUB_OUTPUT
    - name: Cache Dependencies
      id: cache-dependencies
      uses: actions/cache@v4
      with:
        path: deps/build/destdir
        key: dependencycache-${{ runner.os }}-${{ steps.dephash.outputs.dephash }}
    - name: Cache Download Files
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      id: cache-download
      uses: actions/cache@v4
      with:
        path: deps/download
        key: downloadcache-${{ runner.os }}-${{ github.run_id }}
        restore-keys: |
          downloadcache-${{ runner.os }}
    - name: Download GMP
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        mkdir -p deps/download/GMP
        test -r deps/download/GMP/gmp-6.2.1.tar.bz2 || curl -o deps/download/GMP/gmp-6.2.1.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.bz2
    - name: 2. Building dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        cd deps
        mkdir -p build
        cd build
        cmake .. -DDEP_WX_GTK3=ON -DDEP_DOWNLOAD_DIR=$(pwd)/../download
        make
        cd ../..
    - name: 3. Building PrusaSlicer
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        mkdir build
        cd build
        cmake .. -DSLIC3R_STATIC=1 -DSLIC3R_GTK=3 -DSLIC3R_PCH=OFF -DCMAKE_PREFIX_PATH=$(pwd)/../deps/build/destdir/usr/local -DCMAKE_INSTALL_PREFIX=/usr
        make -j $(nproc)
        sudo make install
        find ../deps/build/destdir/usr/local
    - name: 4. Bundling
      run: |
        set +x
        PACKAGE=PrusaSlicer
        DESKTOP=/usr/resources/applications/PrusaSlicer.desktop
        ICON=/usr/resources/icons/PrusaSlicer.png

        export ARCH="$(uname -m)"
        export APPIMAGE_EXTRACT_AND_RUN=1
        export VERSION=2.9.0-alpha1 # FIXME: Do not hardcode

        APPIMAGETOOL="https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$ARCH.AppImage"
        UPINFO="gh-releases-zsync|$(echo $GITHUB_REPOSITORY | tr '/' '|')|continuous|*$ARCH.AppImage.zsync"
        LIB4BN="https://raw.githubusercontent.com/VHSgunzo/sharun/refs/heads/main/lib4bin"

        # Prepare AppDir
        mkdir -p ./"$PACKAGE"/AppDir/shared/lib \
          ./"$PACKAGE"/AppDir/usr/share/applications \
          ./"$PACKAGE"/AppDir/etc
        cd ./"$PACKAGE"/AppDir

        cp -r /usr/resources     ./usr/

        cp $DESKTOP              ./usr/share/applications
        cp $DESKTOP              ./
        cp /"$ICON"              ./

        ln -s ./usr/share        ./share
        ln -s ./usr/resources    ./resources
        ln -s ./shared/lib       ./lib

        # DEPLOY GDK # FIXME: Automate
        echo "Deploying gdk..."
        GDK_PATH="$(find /usr/lib -type d -regex ".*/gdk-pixbuf-2.0" -print -quit)"
        cp -rv "$GDK_PATH" ./shared/lib
        echo "Deploying gdk deps..."
        find ./shared/lib/gdk-pixbuf-2.0 -type f -name '*.so*' -exec ldd {} \; \
        	| awk -F"[> ]" '{print $4}' | xargs -I {} cp -vn {} ./shared/lib
        find ./shared/lib -type f -regex '.*gdk.*loaders.cache' \
        	-exec sed -i 's|/.*lib.*/gdk-pixbuf.*/.*/loaders/||g' {} \;

        # Copy WebKitNetworkProcess
        cp -r /usr/lib/x86_64-linux-gnu/webkit2gtk-4.0 ./shared/lib/
        # ADD LIBRARIES
        wget "$LIB4BN" -O ./lib4bin
        chmod +x ./lib4bin
        # xvfb-run -d -- ./lib4bin -p -v -r -e /usr/bin/prusa-slicer
        xvfb-run -- ./lib4bin -p -v -r -e /usr/bin/prusa-slicer
        # xvfb-run -- ./lib4bin -p -v -r -e /lib/webkit2gtk-4.0/WebKitNetworkProcess # FIXME: xvfb-run: error: Xvfb failed to start
        rm -f ./lib4bin

        # find ./shared -type f -exec strip -s -R .comment --strip-unneeded {} ';'

        # Copy DRI and glvnd
        cp -r /lib/x86_64-linux-gnu/libxcb-dri3.so.0 ./shared/lib/ # Otherwise it will try to load it from the system
        cp -r /usr/share/glvnd   ./usr/share/
        cp -r /usr/lib/x86_64-linux-gnu/dri ./shared/lib/ # May need environment variable LIBGL_DRIVERS_PATH at runtime since '\$${ORIGIN}' in RPATH is wrong?
        cp $(ldd ./shared/lib/dri/*.so |cut -d ">" -f 2 | cut -d " " -f 2 | sort | uniq) ./shared/lib/ 2>/dev/null # FIXME: Deploy dependencies properly

        # Prepare sharun
        wget -c https://github.com/VHSgunzo/sharun/releases/download/v0.1.8/sharun-x86_64-upx -O ./sharun || true
        chmod +x ./sharun
        ln ./sharun ./AppRun
        ./sharun -g

        # Do we also need the __EGL_VENDOR_LIBRARY_DIRS environment variable?

        # MAKE APPIMAGE WITH STATIC RUNTIME
        cd ..
        wget -q "$APPIMAGETOOL" -O ./appimagetool
        chmod +x ./appimagetool

        ./appimagetool --comp zstd \
          --mksquashfs-opt -Xcompression-level --mksquashfs-opt 22 \
          -n -u "$UPINFO" "$PWD"/AppDir "$PWD"/"$PACKAGE"-"$VERSION"-"$ARCH".AppImage

        mv ./*.AppImage* ../
        cd ..
        rm -rf ./"$PACKAGE"
        echo "All Done!"
    - name: 5. Uploading artifacts
      uses: actions/upload-artifact@v4
      with:
        path: '**/*.AppImage'
